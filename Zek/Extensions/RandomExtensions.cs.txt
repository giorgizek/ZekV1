using System;
using System.Collections.Generic;
using System.Linq;
using Zek.Extensions.Collections;

namespace Zek.Extensions
{
    public static class RandomExtensions
    {
        public static bool NextBool(this Random r)
        {
            return r.Next(2) == 1;
        }

        public static byte NextByte(this Random r, byte max = byte.MaxValue)
        {
            return NextByte(r, byte.MinValue, max);
        }
        public static byte NextByte(this Random r, byte min, byte max)
        {
            return (byte)r.Next(min, max);
        }

        public static char NextUppercase(this Random r)
        {
            return "ABCDEFGHJKLMNPQRSTWXYZ"[r.Next("ABCDEFGHJKLMNPQRSTWXYZ".Length)];
        }
        public static char NextLowercase(this Random r)
        {
            return "abcdefgijkmnopqrstwxyz"[r.Next("abcdefgijkmnopqrstwxyz".Length)];
        }

        public static char NextChar(this Random r)
        {
            var s = r.NextBool() ? "ABCDEFGHJKLMNPQRSTWXYZ" : "abcdefgijkmnopqrstwxyz";
            return s[r.Next(s.Length)];
        }

        //public static string NextUppercaseString(this Random r, int length)
        //{
        //    return new string(0.To(length).Select(i => r.NextUppercase()).ToArray());
        //}

        //public static string NextLowercaseString(this Random r, int length)
        //{
        //    return new string(0.To(length).Select(i => r.NextLowercase()).ToArray());
        //}

        public static string NextString(this Random r, int length)
        {
            return new string(0.To(length).Select(i => r.NextChar()).ToArray());
        }

        public static string NextSubstring(this Random r, string text, int minLength, int maxLength)
        {
            var length = r.Next(minLength, maxLength);

            return length > text.Length
                    ? text
                    : text.Substring(r.Next(text.Length - length), length);
        }

        public static int NextAlphaColor(this Random r)
        {
            return Color(r.Next(256), r.Next(256), r.Next(256), r.Next(256));
        }

        public static int NextColor(this Random r)
        {
            return Color(255, r.Next(256), r.Next(256), r.Next(256));
        }

        public static int NextColor(this Random r, int minR, int maxR, int minG, int maxG, int minB, int maxB)
        {
            return Color(255, minR + r.Next(maxR - minR), minG + r.Next(maxG - minG), minB + r.Next(maxB - minB));
        }

        private static int Color(int a, int r, int g, int b)
        {
            return a << 24 | r << 16 | g << 8 | b;
        }

        public static DateTime NextDateTime(this Random r, DateTime min, DateTime max)
        {
            if (min.Kind != max.Kind)
                throw new ArgumentException("min and max have differend Kind");

            return new DateTime(min.Ticks + r.NextLong(max.Ticks - min.Ticks), min.Kind);
        }

        public static long NextLong(this Random r, long max)
        {
            return (long)(r.NextDouble() * max);
        }

        public static long NextLong(this Random r, long min, long max)
        {
            return (long)(min + r.NextDouble() * (max - min));
        }

        public static T NextParams<T>(this Random r, params T[] elements)
        {
            return elements[r.Next(elements.Length)];
        }

        public static T NextElement<T>(this Random r, IList<T> elements)
        {
            return elements[r.Next(elements.Count)];
        }

        public static decimal NextDecimal(this Random r, decimal min, decimal max)
        {
            return r.NextLong((long)(min * 100L), (long)(max * 100L)) / 100m;
        }
        public static double NextDouble(this Random r, double min, double max)
        {
            return r.NextLong((long)(min * 100L), (long)(max * 100L)) / 100D;
        }
    }
}
