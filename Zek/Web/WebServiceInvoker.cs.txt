using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Web.Services.Description;
using System.Xml;
using System.Xml.Serialization;

namespace Zek.Web
{
    /// <summary>
    /// დინამიურად გამოიძახებს ვერბსერვისს.
    /// </summary>
    public class WebServiceInvoker
    {
        public WebServiceInvoker(string webServiceUri)
            : this(new Uri(webServiceUri))
        {
        }
        /// <summary>
        /// Creates the service invoker using the specified web service.
        /// </summary>
        /// <param name="webServiceUri"></param>
        public WebServiceInvoker(Uri webServiceUri)
        {
            _services = new List<string>(); // available services
            _availableTypes = new Dictionary<string, Type>(); // available types

            // create an assembly from the web service description
            _webServiceAssembly = BuildAssemblyFromWSDL(webServiceUri);

            // see what service types are available
            var types = _webServiceAssembly.GetExportedTypes();

            // and save them
            foreach (var type in types)
            {
                _services.Add(type.FullName);
                _availableTypes.Add(type.FullName, type);
            }
        }


        Dictionary<string, Type> _availableTypes;

        /// <summary>
        /// Text description of the available services within this web service.
        /// </summary>
        public List<string> AvailableServices => _services;

        private List<string> _services;



        /// <summary>
        /// Gets a list of all methods available for the specified service.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <returns></returns>
        public List<string> EnumerateServiceMethods(string serviceName)
        {
            var methods = new List<string>();

            if (!_availableTypes.ContainsKey(serviceName))
                throw new Exception("Service Not Available");
            
            var type = _availableTypes[serviceName];

            // only find methods of this object type (the one we generated)
            // we don't want inherited members (this type inherited from SoapHttpClientProtocol)
            foreach (var minfo in type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly))
                methods.Add(minfo.Name);

            return methods;
        }

        /// <summary>
        /// Invokes the specified method of the named service.
        /// </summary>
        /// <typeparam name="T">The expected return type.</typeparam>
        /// <param name="serviceName">The name of the service to use.</param>
        /// <param name="methodName">The name of the method to call.</param>
        /// <param name="args">The arguments to the method.</param>
        /// <returns>The return value from the web service method.</returns>
        public T InvokeMethod<T>(string serviceName, string methodName, params object[] args)
        {
            // create an instance of the specified service
            // and invoke the method
            var obj = _webServiceAssembly.CreateInstance(serviceName);

            var type = obj.GetType();

            // NAV Web services failed here because the service was not using default credentials
            // Start of inserted code --->
            // Try to tell it to useDefaultCredentials.
            var useDefaultCred = type.GetProperty("UseDefaultCredentials");

            useDefaultCred.SetValue(obj, true, null);
            // End of inserted code <---

            return (T)type.InvokeMember(methodName, BindingFlags.InvokeMethod, null, obj, args);
        }

        /// <summary>
        /// Builds the web service description importer, which allows us to generate a proxy class based on the 
        /// content of the WSDL described by the XmlTextReader.
        /// </summary>
        /// <param name="xmlreader">The WSDL content, described by XML.</param>
        /// <returns>A ServiceDescriptionImporter that can be used to create a proxy class.</returns>
        private ServiceDescriptionImporter BuildServiceDescriptionImporter(XmlTextReader xmlreader)
        {
            // make sure xml describes a valid wsdl
            if (!ServiceDescription.CanRead(xmlreader))
                throw new Exception("Invalid Web Service Description");

            // parse wsdl
            var serviceDescription = ServiceDescription.Read(xmlreader);

            // build an importer, that assumes the SOAP protocol, client binding, and generates properties
            var descriptionImporter = new ServiceDescriptionImporter();
            descriptionImporter.ProtocolName = "Soap";
            descriptionImporter.AddServiceDescription(serviceDescription, null, null);
            descriptionImporter.Style = ServiceDescriptionImportStyle.Client;
            descriptionImporter.CodeGenerationOptions = CodeGenerationOptions.GenerateProperties;

            return descriptionImporter;
        }

        /// <summary>
        /// Compiles an assembly from the proxy class provided by the ServiceDescriptionImporter.
        /// </summary>
        /// <param name="descriptionImporter"></param>
        /// <returns>An assembly that can be used to execute the web service methods.</returns>
        private Assembly CompileAssembly(ServiceDescriptionImporter descriptionImporter)
        {
            // a namespace and compile unit are needed by importer
            var codeNamespace = new CodeNamespace();
            var codeUnit = new CodeCompileUnit();

            codeUnit.Namespaces.Add(codeNamespace);

            var importWarnings = descriptionImporter.Import(codeNamespace, codeUnit);

            if (importWarnings == 0) // no warnings
            {
                // create a c# compiler
                var compiler = CodeDomProvider.CreateProvider("CSharp");

                // include the assembly references needed to compile
                var references = new[] { "System.Web.Services.dll", "System.Xml.dll" };

                var parameters = new CompilerParameters(references);

                // compile into assembly
                var results = compiler.CompileAssemblyFromDom(parameters, codeUnit);

                foreach (CompilerError oops in results.Errors)
                {
                    // trap these errors and make them available to exception object
                    throw new Exception("Compilation Error Creating Assembly");
                }

                // all done....
                return results.CompiledAssembly;
            }
            // warnings issued from importers, something wrong with WSDL
            throw new Exception("Invalid WSDL");
        }

        /// <summary>
        /// Builds an assembly from a web service description.
        /// The assembly can be used to execute the web service methods.
        /// </summary>
        /// <param name="webServiceUri">Location of WSDL.</param>
        /// <returns>A web service assembly.</returns>
        private Assembly BuildAssemblyFromWSDL(Uri webServiceUri)
        {
            if (string.IsNullOrEmpty(webServiceUri.ToString()))
                throw new Exception("Web Service Not Found");

            //This following code does not work for NAV Web services so I replaced it
            //XmlTextReader xmlreader = new XmlTextReader(webServiceUri.ToString() + "?wsdl");
            // Start of new code -->
            var l_http = (HttpWebRequest)WebRequest.Create(webServiceUri.ToString());

            l_http.Timeout = 5000; // Timeout after 5 seconds
            l_http.UseDefaultCredentials = true;

            var l_response = (HttpWebResponse)l_http.GetResponse();

            var enc = Encoding.GetEncoding(1252); // Windows default Code Page

            var l_responseStream = new StreamReader(l_response.GetResponseStream(), enc);

            var xmlreader = new XmlTextReader(l_responseStream);
            // End of new code <--

            var descriptionImporter = BuildServiceDescriptionImporter(xmlreader);

            return CompileAssembly(descriptionImporter);
        }

        private Assembly _webServiceAssembly;


        /// <summary>
        /// გამოიძახებს ვებსერვისს
        /// </summary>
        /// <typeparam name="T">რა ტიპსაც აბრუნებს ვებსერვისი</typeparam>
        /// <param name="url">მისამართი წებსერვისის (WSDL)</param>
        /// <param name="serviceName">სერვისის სახელი</param>
        /// <param name="methodName">მეთოდის სახელი</param>
        /// <param name="args">პატამეტრები</param>
        /// <returns>აბრუნებს ვებსერვისიდან მიღებულ მნიშვნელობას.</returns>
        public static T Invoke<T>(string url, string serviceName, string methodName, params object[] args)
        {
            var wsi = new WebServiceInvoker(new Uri(url));

            if (serviceName == null)
            {
                if (wsi.AvailableServices.Count == 0)
                    throw new Exception("Web Service name(s) not found (AvailableServices == 0).");

                serviceName = wsi.AvailableServices[0];
            }

            if (!wsi.AvailableServices.Contains(serviceName))
                throw new ArgumentException($"Service '{serviceName}' not found.", nameof(serviceName));

            return wsi.InvokeMethod<T>(serviceName, methodName, args);
        }
    }
}
